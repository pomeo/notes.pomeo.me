<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://notes.sovechkin.com/</id>
  <title>notes.sovechkin.com</title>
  <updated>2013-06-06T07:01:42Z</updated>
  <link rel="alternate" href="http://notes.sovechkin.com/"/>
  <link rel="self" href="http://notes.sovechkin.com/atom.xml"/>
  <author>
    <name>Sergey Ovechkin</name>
    <uri>http://sovechkin.com</uri>
  </author>
  <entry>
    <id>tag:notes.sovechkin.com,2013-06-06:/reboot_server_on_out-of-memory_condition.html</id>
    <title type="html">reboot server on out-of-memory condition</title>
    <published>2013-06-06T07:01:42Z</published>
    <updated>2013-06-06T07:05:18Z</updated>
    <link rel="alternate" href="http://notes.sovechkin.com/reboot_server_on_out-of-memory_condition.html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;/etc/sysctl.conf&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;vm.panic_on_oom=1
kernel.panic=10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The vm.panic_on_oom=1 line enables panic on OOM, the kernel.panic=10 line tells the kernel to reboot ten seconds after panicking.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:notes.sovechkin.com,2013-06-06:/iptables.html</id>
    <title type="html">iptables</title>
    <published>2013-06-06T06:07:34Z</published>
    <updated>2013-06-06T06:50:12Z</updated>
    <link rel="alternate" href="http://notes.sovechkin.com/iptables.html"/>
    <content type="html">&lt;pre&gt;&lt;code class="bash"&gt;netstat -anp | grep LISTEN&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;sudo nano /etc/iptables.firewall.rules&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;*filter

# MongoDB
-A INPUT -m state --state NEW -p tcp --destination-port 27017 -s x.x.x.x -j ACCEPT
-A OUTPUT -d x.x.x.x -p tcp --source-port 27017 -m state --state ESTABLISHED -j ACCEPT
-A INPUT -m state --state NEW -p tcp --destination-port 28017 -s x.x.x.x -j ACCEPT
-A OUTPUT -d x.x.x.x -p tcp --source-port 28017 -m state --state ESTABLISHED -j ACCEPT

# Redis
-A INPUT -m state --state NEW -p tcp --destination-port 6379 -s x.x.x.x -j ACCEPT
-A OUTPUT -d x.x.x.x -p tcp --source-port 6379 -m state --state ESTABLISHED -j ACCEPT

# RabbitMQ
-A INPUT -m state --state NEW -p tcp --destination-port 5672 -s x.x.x.x -j ACCEPT
-A OUTPUT -d x.x.x.x -p tcp --source-port 5672 -m state --state ESTABLISHED -j ACCEPT
-A INPUT -m state --state NEW -p tcp --destination-port 5673 -s x.x.x.x -j ACCEPT
-A OUTPUT -d x.x.x.x -p tcp --source-port 5673 -m state --state ESTABLISHED -j ACCEPT
-A INPUT -m state --state NEW -p tcp --destination-port 15672 -s x.x.x.x -j ACCEPT
-A OUTPUT -d x.x.x.x -p tcp --source-port 15672 -m state --state ESTABLISHED -j ACCEPT

# MariaDB
-A INPUT -m state --state NEW -p tcp --destination-port 3306 -s x.x.x.x -j ACCEPT
-A OUTPUT -d x.x.x.x -p tcp --source-port 3306 -m state --state ESTABLISHED -j ACCEPT

#  Allow all loopback (lo0) traffic and drop all traffic to 127/8 that doesn't use lo0
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT

#  Accept all established inbound connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

#  Allow all outbound traffic - you can modify this to only allow certain traffic
-A OUTPUT -j ACCEPT

#  Allow HTTP and HTTPS connections from anywhere (the normal ports for websites and SSL).
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT

#  Allow ports for testing
-A INPUT -p tcp --dport 8080:8090 -j ACCEPT

#  Allow ports for MOSH (mobile shell)
-A INPUT -p udp --dport 60000:61000 -j ACCEPT

#  Allow SSH connections
-A INPUT -p tcp -m state --state NEW --dport 2222 -j ACCEPT

#  Allow ping
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

#  Log iptables denied calls
-A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7

#  Reject all other inbound - default deny unless explicitly allowed policy
-A INPUT -j REJECT
-A FORWARD -j REJECT

COMMIT&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;sudo iptables-restore &amp;lt; /etc/iptables.firewall.rules&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;sudo nano /etc/network/if-pre-up.d/firewall&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;#!/bin/sh
/sbin/iptables-restore &amp;lt; /etc/iptables.firewall.rules&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;sudo chmod +x /etc/network/if-pre-up.d/firewall&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:notes.sovechkin.com,2012-06-23:/nanoc_github_pages.html</id>
    <title type="html">deploy nanoc on github pages</title>
    <published>2012-06-23T12:13:17Z</published>
    <updated>2012-07-29T08:28:16Z</updated>
    <link rel="alternate" href="http://notes.sovechkin.com/nanoc_github_pages.html"/>
    <content type="html">&lt;p&gt;nanoc workspace:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;root [ -&amp;gt; "master" ]
  |- content (nanoc templates)
  |- layouts (nanoc layouts)
  |- lib (ruby files extending nanoc)
  |- output [ -&amp;gt; "gh-pages" ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create the gh-pages branch&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;  $ cd output
  # initialize the local repository
  $ git init
  $ git add .
  # commits your files
  $ git commit -am "init"
  # rename our master branch
  $ git branch -m master gh-pages
  # add your github repository as origin
  $ git remote add origin git@github.com:[user]/[name].git
  # push to the remote repository
  $ git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <id>tag:notes.sovechkin.com,2012-06-22:/oblivion_theme_for_emacs.html</id>
    <title type="html">oblivion theme for Emacs</title>
    <published>2012-06-22T15:48:17Z</published>
    <updated>2012-06-22T15:47:35Z</updated>
    <link rel="alternate" href="http://notes.sovechkin.com/oblivion_theme_for_emacs.html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/pomeo/oblivion-emacs"&gt;&lt;img src="http://img.sovechkin.com/oblivion.png" alt="oblivion theme for Emacs" /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:notes.sovechkin.com,2012-06-22:/install_lxc.html</id>
    <title type="html">Install LXC (Linux Containers)</title>
    <published>2012-06-22T15:33:17Z</published>
    <updated>2012-06-22T15:38:55Z</updated>
    <link rel="alternate" href="http://notes.sovechkin.com/install_lxc.html"/>
    <content type="html">&lt;p&gt;&lt;a href="http://lxc.sourceforge.net"&gt;http://lxc.sourceforge.net&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ sudo apt-get install lxc bridge-utils
$ sudo lxc-create -n name -t ubuntu -- -r lucid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create /etc/network/if-up.d/lxc&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;#!/bin/bash
# script to setup a natted network for lxc guests
CMD_BRCTL=/sbin/brctl
CMD_IFCONFIG=/sbin/ifconfig
CMD_IPTABLES=/sbin/iptables
CMD_ROUTE=/sbin/route
NETWORK_BRIDGE_DEVICE_NAT=lxc-bridge-nat
HOST_NETDEVICE=eth0
PRIVATE_GW_NAT=10.0.2.1
PRIVATE_NETMASK=255.255.255.0

${CMD_BRCTL} addbr ${NETWORK_BRIDGE_DEVICE_NAT}
${CMD_BRCTL} setfd ${NETWORK_BRIDGE_DEVICE_NAT} 0
${CMD_IFCONFIG} ${NETWORK_BRIDGE_DEVICE_NAT} ${PRIVATE_GW_NAT} netmask ${PRIVATE_NETMASK} promisc up
${CMD_IPTABLES} -t nat -A POSTROUTING -o ${HOST_NETDEVICE} -j MASQUERADE
echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;insert in &lt;em&gt;/var/lib/lxc/name/config&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = lxc-bridge-nat                      
lxc.network.name = eth0                                         
lxc.network.hwaddr = ac:de:48:00:0x:xx
lxc.network.ipv4 = 10.0.2.xxx/24
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="bash"&gt;echo "nameserver 8.8.8.8" &amp;gt; /var/lib/lxc/name/rootfs/etc/resolvconf/resolv.conf.d/base
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;edit &lt;em&gt;/var/lib/lxc/name/rootfs/etc/network/interfaces&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
  address   10.0.2.xxx
  netmask   255.255.255.0
  gateway   10.0.2.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ sudo lxc-start --name name_container
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;login &lt;em&gt;root&lt;/em&gt; / password &lt;em&gt;root&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;for boot on startup&lt;br /&gt;
LXC &amp;lt; 0.7.5&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ sudo ln -s /var/lib/lxc/name/config /etc/lxc/name.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;edit &lt;em&gt;/etc/default/lxc&lt;/em&gt; add&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;CONTAINERS="name"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;LXC &amp;gt;=0.7.5&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ sudo ln -s /var/lib/lxc/name/config /etc/lxc/auto/name.conf
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
